
// lsof | grep minishell | grep PIPE


int    ftpipes(t_format *ptr, t_node **head)
{
   
    t_format *tmp = ptr;


    int commands_len = 2;
	int **pipes_fd;
	int *forks;
	
	forks = malloc(commands_len * (sizeof(int*)));
	pipes_fd = malloc((commands_len - 1) * (sizeof(int*)));

	int j = 0;
	while (j < commands_len)
	{
		pipes_fd[j] = malloc(2 * sizeof(int));
		
		if (pipe(pipes_fd[j]) == -1)
		{
			return (1);
		}
		j++;
	}

	int i = 0;
    while(tmp->pipes != NULL)
    {
        // printf("%s\n", tmp->pipes->line);


		forks[i] = fork();
		if (forks[i] < 0)
		{
			return (2);
		}
		if (forks[i] == 0)
		{
			// Child process 
			if (i == 0) // first fork
			{
				dup2(pipes_fd[0][1], 1);
			}
			else if (i == (commands_len - 1)) // last fork
			{
				dup2(pipes_fd[i - 1][0], 0);
			}
			else
			{
				dup2(pipes_fd[i - 1][0], 0);
				dup2(pipes_fd[i][1], 1);
			}
			
			
			
			
			close(pipes_fd[0][0]);
			close(pipes_fd[0][1]);
			close(pipes_fd[1][0]);
			close(pipes_fd[1][1]);
			// close(pipes_fd[2][0]);
			// close(pipes_fd[2][1]);
			
            //exec

        //    execlp(tmp->pipes->command, tmp->pipes->command, tmp->pipes->arguments, NULL);
        
        	if (i == 0)
			{
				execlp("ls", "ls", NULL);
			}
			else if (i == 1)
			{
				execlp("grep", "grep", "p", NULL);
			}
			else if (i == 2)
			{
				execlp("grep", "grep", "par", NULL);
			}
			else if (i == 3)
			{
				execlp("grep", "grep", "main2.k", NULL);
			}


			
			exit(0);
		}
        tmp->pipes = tmp->pipes->next;

		i++;
	}
	


	
	close(pipes_fd[0][0]);
	close(pipes_fd[0][1]);
	close(pipes_fd[1][0]);
	close(pipes_fd[1][1]);
	// close(pipes_fd[2][0]);
	// close(pipes_fd[2][1]);
		
	waitpid(forks[0], NULL, 0);
	waitpid(forks[1], NULL, 0);
	waitpid(forks[2], NULL, 0);
	// waitpid(forks[3], NULL, 0);













/*

	int commands_len = 4;
	int **pipes_fd;
	int *forks;
	
	forks = malloc(commands_len * (sizeof(int*)));
	pipes_fd = malloc((commands_len - 1) * (sizeof(int*)));

	int j = 0;
	while (j < commands_len)
	{
		pipes_fd[j] = malloc(2 * sizeof(int));
		
		if (pipe(pipes_fd[j]) == -1)
		{
			return (1);
		}
		j++;
	}

	int i = 0;
	while (i < commands_len)
	{
		forks[i] = fork();
		if (forks[i] < 0)
		{
			return (2);
		}
		if (forks[i] == 0)
		{
			// Child process 
			if (i == 0) // first fork
			{
				dup2(pipes_fd[0][1], 1);
			}
			else if (i == (commands_len - 1)) // last fork
			{
				dup2(pipes_fd[i - 1][0], 0);
			}
			else
			{
				dup2(pipes_fd[i - 1][0], 0);
				dup2(pipes_fd[i][1], 1);
			}
			
			
			
			
			close(pipes_fd[0][0]);
			close(pipes_fd[0][1]);
			close(pipes_fd[1][0]);
			close(pipes_fd[1][1]);
			close(pipes_fd[2][0]);
			close(pipes_fd[2][1]);
			
			
			if (i == 0)
			{
				execlp("ls", "ls", NULL);
			}
			else if (i == 1)
			{
				execlp("grep", "grep", "main", NULL);
			}
			else if (i == 2)
			{
				execlp("grep", "grep", "main2", NULL);
			}
			else if (i == 3)
			{
				execlp("grep", "grep", "main2.k", NULL);
			}

			
			exit(0);
		}
		i++;
	}
	


	
	close(pipes_fd[0][0]);
	close(pipes_fd[0][1]);
	close(pipes_fd[1][0]);
	close(pipes_fd[1][1]);
	close(pipes_fd[2][0]);
	close(pipes_fd[2][1]);
		
	waitpid(forks[0], NULL, 0);
	waitpid(forks[1], NULL, 0);
	waitpid(forks[2], NULL, 0);
	waitpid(forks[3], NULL, 0);

    */
   return (0);
}

----------------------------------

int	pipe_len(t_pipes *pipes)
{
	t_pipes *tmp;
	int i;

	i = 0;
	while(tmp)
	{
		i++;
		tmp = tmp->next;
	}
	return(i);
}

int    ft_setpipes(t_pipes *pipes, t_node **head)
{
	int i;
	int j;
	int *pid;
	int **pfd;
	int len;

	i = 0;
	j = 0;
	len = pipe_len(pipes); 
	pid = malloc(len * sizeof(int *));
	pfd = malloc((len - 1) * (sizeof(int*)));

	while(j < len - 1)
	{
		pfd[j] = malloc(2 * sizeof(int));
		if (pipe(pfd[j]) == -1)
			return(1);
		j++;
	}
	j = 0;
	while(i < len)
	{
		pid[i] = fork();
		if (pid[i] < 0)
			return (2);
		if (pid[i] == 0)
		{
			// this is child
			if (i == 0) // first cmd
				dup2(pfd[0][1], 1);
			else if (i == (len - 1)) // last cmd
				dup2(pfd[i - 1][0], 0);
			else
			{
				dup2(pfd[i-1][0], 0);
				dup2(pfd[i][1], 1);
			}
			while(j < len - 1)
			{
				close(pfd[j][0]);
				close(pfd[j][1]);
				j++;
			}
			//commands execution
			ft_exec_cmd(pipes->command, pipes->arguments, pipes->redirections, head);

			exit(0);
				
		}
		j = 0;
		i++;
		pipes = pipes->next;
	}
	
	j = 0;
	while(j < len - 1)
	{
		close(pfd[j][0]);
		close(pfd[j][1]);
		j++;
	}
	j = 0;
	while (j < len)
	{
		waitpid(pid[j], NULL, 0);
		j++;
	}
	

	return (0);
}











------------***** st************

	int i = 0;
	int len;
	int pid;
	int new_fd[2];
	int old_fd[2];

	len = pipe_len(pipes);
	while(i < len)
	{
		if (pipes->next)
			pipe(new_fd);
		pid = fork();
		if (pid == 0)
		{
			if (i != 0)
			{
				dup2(old_fd[0], 0);
            	close(old_fd[0]);
            	close(old_fd[1]);
			}
			if (i != (len - 1))
			{
				close(new_fd[0]);
            	dup2(new_fd[1], 1);
            	close(new_fd[1]);
			}
			ft_exec_cmd(pipes->command, pipes->arguments, pipes->redirections, head);
		}
		else
		{
			if(i != 0)
			{
				close(old_fd[0]);
            	close(old_fd[1]);
			}
			if ( i != (len - 1))
			{
				old_fd[0] = new_fd[0];
				old_fd[1] = new_fd[1];
			}
		}
		i++;
		pipes = pipes->next;
		
	}
	if (i > 2)
	{
		close(old_fd[0]);
    	close(old_fd[1]);
	}



	------------------- twelve -----

	int    ft_setpipes(t_pipes *pipes, t_node **head)
{
	int i = -1;
	int len;
	int prev;
	int pid[100];
	int fd[100][2];
	
	len = pipe_len(pipes);
	while (++i < len)
	{
		if (i != len-1)
			pipe(fd[i]);
		pid[i] = fork();
		if (pid[i] == 0)
		{
			prev = i - 1;
			if (i == 0)
			{
				dup2(fd[i][1], 1);
				close(fd[i][0]);
				close(fd[i][1]);
			}
			if (i > 0 && (i < (len - 1)))
			{
				dup2(fd[prev][0], 0);
				close(fd[prev][0]);
				dup2(fd[i][1], 1);
				close(fd[i][1]);
				//close(fd[prev][1]);
			}
			if (i == (len - 1))
			{
				dup2(fd[prev][0], 0);
				close(fd[prev][0]);
				//close(fd[i][1]);
				//close(fd[i][0]);
				//close(fd[prev][1]);
			}
			ft_exec_cmd(pipes->command, pipes->arguments, pipes->redirections, head);
			exit(0);
		}
		else
		{
			if (i == 0)
				close(fd[i][1]);
			if (i > 0 && (i < (len - 1)))
			{
				close(fd[i - 1][0]);
				close(fd[i][1]);
			}
			if (i == (len - 1))
				close(fd[i - 1][0]);
		}
		pipes = pipes->next;
	}
	i = -1;
	while(++i < len)
		wait(NULL);
	return(0);
}